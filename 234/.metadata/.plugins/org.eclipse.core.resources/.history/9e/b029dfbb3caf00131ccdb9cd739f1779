import java.io.*;
import java.util.*;

public class Main {
	BufferedReader in;
	PrintWriter out;
	StringTokenizer st;
	
	class Segment {
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + len;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Segment other = (Segment) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (len != other.len)
				return false;
			return true;
		}

		int from, to, len;
		
		Segment(int from, int to) {
			this.from = from;
			this.to = to;
			this.len = to - from;
		}

		private Main getOuterType() {
			return Main.this;
		}
	}
	
	void solve() throws IOException {
		int n = ni(), m = ni();
		
		Set<Segment> t = new HashSet<Segment>();
		for (int i = 0; i < n; i++) {
			char[] c = in.readLine().toCharArray();
			
			int jg = 0, js = 0;
			for (int j = 0; j < m; j++) {
				if (c[j] == 'G') {
					jg = j;
				} else if (c[j] == 'S') {
					js = j;
				}
			}
			if (jg > js) {
				out.println("-1");
				return;
			}
			t.add(new Segment(jg, js));
		}
		
		out.println(t.size());
	}
	
	Main() throws IOException {
		in = new BufferedReader(new InputStreamReader(System.in));
		out = new PrintWriter(new OutputStreamWriter(System.out));
		solve();
		in.close();
		out.close();
	}
	
	String ns() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			st = new StringTokenizer(in.readLine());
		}
		return st.nextToken();
	}
	
	int ni() throws IOException {
		return Integer.valueOf(ns());
	}
	
	double nd() throws IOException {
		return Double.valueOf(ns());
	}
	
	long nl() throws IOException {
		return Long.valueOf(ns());
	}
	
	public static void main(String[] args) throws IOException {
		new Main();
	}
	
}